## NOTE: file edited by Github user @tommy91
--------------------------------------------

This is my edit of the 'ardupilot' branch of the Gazebo simulator source,
to make it work on macOS Mojave. You can find the original code here: 
                  https://bitbucket.org/osrf/gazebo

The initial commit is the clone of the original 'ardupilot' branch.
Next commits show you the changes I've made to resolve the errors I got.


Initial setup:

- Install 'homebrew' to make things easier:
    with homebrew you can search for packages using:
      $ brew search PACKAGE_NAME
    and install packages using:
      $ brew install PACKAGE_NAME
  This is usefull to install all the missing dependencies
  that the compiler will complain about.

- If you don't have it already, install 'cmake':
    $ brew install cmake


Compilation/installation steps that worked for me:

- Clone or download the repository into a directory and go into it:
    $ git clone https://github.com/tommy91/Gazebo-Ardupilot.git MY_DIRECTORY
    $ cd MY_DIRECTORY

- Create a build directory and go there:
    $ mkdir build
    $ cd build

- Make with:
    $ cmake ../

- If no 'BUILD ERRORS' you can skip the next 3 steps.

- Run this command to be able to find in the next step the needed formulas:
    $ brew tap osrf/simulation

- Missing dependencies I've instelled (notified in 'BUILD ERRORS'):
    $ brew install freeimage
    $ brew install protobuf
        If this error (or similar) happens:
            ==> Pouring python@2-2.7.16.mojave.bottle.tar.gz
            Error: An unexpected error occurred during the `brew link` step
            The formula built, but is not symlinked into /usr/local
            Permission denied @ dir_s_mkdir - /usr/local/Frameworks
            Error: Permission denied @ dir_s_mkdir - /usr/local/Frameworks
        I solved it with:
            $ sudo mkdir /usr/local/Frameworks    (which was missing)
            $ sudo chown $(whoami):admin /usr/local/Frameworks
    $ brew install sdformat5
    $ brew install qt5
        And also:
            $ export Qt5Widgets_DIR=/usr/local/opt/qt5/lib/cmake/Qt5Widgets
            $ export Qt5OpenGL_DIR=/usr/local/opt/qt5/lib/cmake/Qt5OpenGL
            $ export Qt5Test_DIR=/usr/local/opt/qt5/lib/cmake/Qt5Test
    $ brew install ignition-msgs0
    $ brew install ignition-transport3
    $ brew install libtar
    $ brew install tinyxml2
    $ brew install tbb
    $ brew install ogre1.9
        If still in build errors after installing:
            $ export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
    $ brew install qwt
    $ brew install boost@1.55
        And also:
            $ brew link --force boost@1.55

  ( You need to install all the missing dependencies notified in build errors,
    after you install a dependency redo 'cmake ../', 
    when there are no more build errors you can go on )

- To solve 'Missing: libcurl. Required for connection to model database.' I did:
    $ export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/Homebrew/Library/Homebrew/os/mac/pkgconfig/10.12

- When no more build errors, run the command:
    $ make -j4

- Install with:
    $ sudo make install

- Try with:
    $ gazebo --verbose


If you notice any violation in the use I've made of this project please contact me.

## END OF EDITS: it follows the original content
------------------------------------------------



Gazebo - A dynamic multi-robot simulator
----------------------------------------

This is the Gazebo simulator.  Gazebo simulates multiple robots in a
3D environment, with extensive dynamic interaction between objects.

  http://gazebosim.org

Installation
------------
Instructions are located at

  http://gazebosim.org/install

Gazebo cmake parameters available at configuring time:

 - BUILD_TESTING (boot) [default False]
   Include the testsuite compilation in the default make call (make all)
 - ENABLE_DIAGNOSTICS
   If this is defined, it will enable diagnostic timers using the macros
   from Diagnostics.hh (see also the standalone diagnostics example):
   DIAG_TIMER_START("name")
   DIAG_TIMER_LAP("name")
   DIAG_TIMER_STOP("name")
 - USE_HOST_CFLAGS (bool) [default True]
   Check the building machine for supported compiler optimizations and use 
   them to build the software.
 - USE_UPSTREAM_CFLAGS (bool) [default True]
   Use the recommend gazebo developers compiler optimizations flags.
 - USE_EXTERNAL_TINYXML (bool) [default True]
   Use external copy of tinyxml during the build.
 - USE_EXTERNAL_TINYXML2 (bool) [default True]
   Use external copy of tinyxml2 during the build.
 - USE_LOW_MEMORY_TEST (bool) [default False]
   Use reduced version of tests which need less quantity of RAM memory
   available.
 - FORCE_GRAPHIC_TESTS_COMPILATION (bool) [default False]
   Ignore system checks to look for graphic and acceleration support and
   compile all the test suite.
 - ENABLE_SCREEN_TESTS (bool) [default True]
   Enable or disable tests that need screen rendering to run properly.
   Headless machines or machines with the screen turned off should set this to
   False 
 - USE_PCH (bool) [default False]
   Use GNU Precompiled Headers. Only works with the gnu compiler

 - ENABLE_TESTS_COMPILATION (DEPRECATED)
   The new behaviour is to call 'make tests' explicitly to compile the test
   suite. Calling 'make' or 'make all' won't compile the tests


Uninstallation
--------------
Read the uninstallation instructions (http://gazebosim.org/uninstall) in the
online manual for generic instructions.  For most people, the following
sequence will suffice (might need sudo if it installed in /usr):

  $ make uninstall (inside the gazebo/build directory)
